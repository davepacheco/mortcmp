#!/usr/bin/env node
/* vim: set ft=javascript: */

/*
 * mortcmp: print fixed-rate and ARM mortgage details
 */

var mod_extsprintf = require('extsprintf');
var mod_getopt = require('posix-getopt');
var mod_path = require('path');
var mod_tab = require('tab');
var VError = require('verror');

var createMortgage = require('../lib/mortgage').createMortgage;

var fprintf = mod_extsprintf.fprintf;
var printf = mod_extsprintf.printf;
var sprintf = mod_extsprintf.sprintf;

var mcArg0 = mod_path.basename(process.argv[1]);
var mcUsageMessage = [
    'usage: %s [--term=TERM] [--rate=RATE1[:PERIOD1] ...] [--schedule] ',
    '    --compare --investment=INVRATE ... PRINCIPAL',
    '',
    'Computes an mortization schedule for a loan of term TERM with interest ',
    'rate RATE1 for a the initial period PERIOD1, optional RATE2 for period ',
    'PERIOD2, and so on.  TERM and each PERIOD can be specified as a number of',
    'months by default, or with years using a "y" suffix (e.g., "10y"). If',
    '--compare is not specified, a summary of this loan is printed.',
    '',
    'If --compare is specified, then the command-line options describe two ',
    'different loans having the same PRINCIPAL.  The --term and --rate options',
    'that precede --compare describe the first loan.  The remaining --term and',
    '--rate options describe the second loan.  The amortization schedules for ',
    'both loans are compared on a month-to-month basis and a measure of ',
    'opportunity cost is simulated as follows: whenever one loan\'s payment ',
    'exceeds the other\'s for a given month, the program simulates depositing ',
    'the difference into an account earning INVRATE annually.  Each loan has ',
    'a separate account.  The value of this account at the end of the loan ',
    'term is a measure of partial opportunity cost of the other loan.  (The ',
    'difference in these values is a measure of the actual opportunity cost of',
    'each loan.)',
    '',
    '    --schedule   print the actual amortization schedule in addition to ',
    '                 the loan summary information'
].join('\n');

function main()
{
	var parser, option;			/* for option parsing */
	var mortoptions, mortoptions0;		/* mortgage params */
	var mortgage, mortgage0;		/* mortgage objects */
	var verbose, investrate, compare;	/* misc options */
	var c, rate, period;			/* scoped to switch */

	verbose = false;
	investrate = null;
	compare = false;

	mortoptions = {
	    'principal': null,
	    'term': 360,
	    'periods': []
	};

	parser = new mod_getopt.BasicParser(
	    'c(compare)i:(investment)r:(rate)t:(term)v(verbose)',
	    process.argv);
	while ((option = parser.getopt()) !== undefined) {
		switch (option.option) {
		case 'c':
			if (compare) {
				usage(new VError(
				    '--compare may only be specified once'));
			}
			compare = true;
			mortoptions0 = mortoptions;
			mortoptions = {
			    'principal': null,
			    'term': 360,
			    'periods': []
			};
			break;

		case 'i':
			rate = parseFloat(option.optarg);
			if (isNaN(rate) || rate < 0 || rate > 1) {
				usage(new VError('bad value for ' +
				    '--investment: "%s"', option.optarg));
			}
			investrate = rate;
			break;

		case 'r':
			rate = null;
			period = null;
			c = option.optarg.lastIndexOf(':');
			if (c != -1) {
				rate = option.optarg.substr(0, c);
				period = option.optarg.substr(c + 1);
			} else {
				rate = option.optarg;
			}

			rate = parseFloat(rate);
			if (isNaN(rate) || rate < 0 || rate > 1) {
				usage(new VError('bad value for rate part of ' +
				    '--rate: "%s"', option.optarg));
			}

			if (period !== null) {
				period = parseTimeValue(period);
				if (period === null) {
					usage(new VError('bad value for ' +
					    'period part of --rate: "%s"',
					    option.optarg));
				}
			}
			mortoptions.periods.push({
			    'rate': rate,
			    'period': period
			});
			break;

		case 't':
			mortoptions.term = parseTimeValue(option.optarg);
			if (mortoptions.term === null)
				usage(new VError('bad value for --term: "%s"',
				    option.option));
			break;

		case 'v':
			verbose = true;
			break;

		default:
			/* message printed by getopt */
			usage();
			break;
		}
	}

	if (parser.optind() >= process.argv.length) {
		usage(new VError('missing required argument: "principal"'));
	}

	if (parser.optind() < process.argv.length - 1) {
		usage(new VError('extra arguments'));
	}

	if (compare && investrate === null) {
		usage(new VError('--investment must be specified with ' +
		    '--compare'));
	}

	mortoptions.principal = Number(process.argv[parser.optind()]);
	if (isNaN(mortoptions.principal) || mortoptions.principal <= 0)
		usage(new VError('invalid principal'));

	if (compare) {
		mortoptions0.principal = mortoptions.principal;
		mortgage0 = createMortgage(mortoptions0);
		if (mortgage0 instanceof Error)
			fatal(mortgage0);
	}

	mortgage = createMortgage(mortoptions);
	if (mortgage instanceof Error)
		fatal(mortgage);

	if (compare) {
		printMortgage('loan 1', mortgage0, false);
		printf('\n');
		printMortgage('loan 2', mortgage, false);
		printf('\n');
		compareMortgages(mortgage0, mortgage, investrate, verbose);
	} else {
		printMortgage('loan', mortgage, verbose);
	}
}

function usage(err)
{
	if (err)
		fprintf(process.stderr, '%s: %s\n', mcArg0, err.message);
	fprintf(process.stderr, mcUsageMessage + '\n', mcArg0);
	process.exit(2);
}

function fatal(err)
{
	fprintf(process.stderr, '%s: %s\n', mcArg0, err.message);
	process.exit(1);
}

function printMortgage(label, mortgage, verbose)
{
	var term, schedule, periodrows;
	var i, laststart, lastrate, rate;

	term = mortgage.term();
	printf('%s details: $%s paid monthly over %d months\n',
	    label, mortgage.principal(), term);

	schedule = mortgage.schedule();
	periodrows = [];
	laststart = 0;
	lastrate = schedule[0].mrate * 12;
	for (i = 1; i < schedule.length; i++) {
		rate = schedule[i].mrate * 12;
		if (rate != lastrate ||
		    schedule[i].total != schedule[laststart].total) {
			periodrows.push([
			    '',
			    sprintf('Months %3d to %3d', laststart + 1, i - 1),
			    sprintf('%5s%%', (100 * lastrate).toFixed(3)),
			    sprintf('$%7s', schedule[i - 1].total.toFixed(2)),
			    sprintf('$ %9s',
			    schedule[laststart].pbefore.toFixed(2)),
			    sprintf('$ %9s', schedule[i - 1].pafter.toFixed(2))
			    ]);
			laststart = i;
			lastrate = rate;
		}
	}

	periodrows.push([
	    '',
	    sprintf('Months %3d to %3d', laststart + 1, i),
	    sprintf('%5s%%', (100 * lastrate).toFixed(3)),
	    sprintf('$%7s', schedule[i - 1].total.toFixed(2)),
	    sprintf('$ %9s',
	    schedule[laststart].pbefore.toFixed(2)),
	    sprintf('$ %9s', schedule[i - 1].pafter.toFixed(2))
	]);

	mod_tab.emitTable({
	    'rows': periodrows,
	    'columns': [
		{ 'label': '',         'width': 4  },
		{ 'label': '',         'width': 17 },
		{ 'label': 'RATE',     'width': 7,  'align': 'right'  },
		{ 'label': 'PAYMENT',  'width': 9,  'align': 'right'  },
		{ 'label': 'P BEFORE', 'width': 12, 'align': 'right' },
		{ 'label': 'P AFTER',  'width': 12, 'align': 'right' }
	    ]
	});

	if (verbose) {
		printf('\n');
		mod_tab.emitTable({
		    'columns': [
			{ 'label': 'MONTH',     'width': 5, 'align': 'right' },
		        { 'label': 'P BEFORE',  'width': 11, 'align': 'right' },
		        { 'label': 'PAYMENT',   'width': 11, 'align': 'right' },
		        { 'label': 'INTEREST',  'width': 11, 'align': 'right' },
		        { 'label': 'PRINCIPAL', 'width': 11, 'align': 'right' },
		        { 'label': 'P AFTER',   'width': 11, 'align': 'right' }
		    ],
		    'rows': schedule.map(function (p, m) {
			return ({
			    'MONTH': m + 1,
			    'P BEFORE': p.pbefore.toFixed(2),
			    'PAYMENT': p.total.toFixed(2),
			    'INTEREST': p.interest.toFixed(2),
			    'PRINCIPAL': p.principal.toFixed(2),
			    'P AFTER': p.pafter.toFixed(2)
			});
		    })
		});
	}
}

function compareMortgages(m0, m1, investrate, verbose)
{
	var s0, s1;		/* schedules for each loan */
	var p0, p1;		/* monthly payments */
	var a0, a1;		/* investment account info */
	var i0, i1, idelta;	/* total interest paid */
	var v0, v1, vdelta;	/* investment account final balances */
	var details, term, i, delta;

	s0 = m0.schedule();
	s1 = m1.schedule();
	term = Math.max(s0.length, s1.length);

	if (verbose) {
		details = [];
	}

	a0 = [];
	a1 = [];
	for (i = 0; i < term; i++) {
		/*
		 * "delta" is the advantage for loan 0, which means it's
		 * positive when loan 0's payment is less than loan 1's.
		 */
		p0 = i >= s0.length ? 0 : s0[i].total;
		p1 = i >= s1.length ? 0 : s1[i].total;
		delta = p1 - p0;
		accumDelta(a0, delta, investrate);
		accumDelta(a1, -delta, investrate);

		if (verbose) {
			details.push({
			    'MONTH': i + 1,
			    'M0 PAY': p0.toFixed(2),
			    'M1 PAY': p1.toFixed(2),
			    'M0 DEP': a0[i].deposit.toFixed(2),
			    'M0 BAL': a0[i].balanceAfter.toFixed(2),
			    'M1 DEP': a1[i].deposit.toFixed(2),
			    'M1 BAL': a1[i].balanceAfter.toFixed(2)
			});
		}
	}

	if (verbose) {
		mod_tab.emitTable({
		    'rows': details,
		    'columns': [ {
		        'label': 'MONTH',
			'width': 5,
			'align': 'right'
		    }, {
		        'label': 'M0 PAY',
			'width': 8,
			'align': 'right'
		    }, {
		        'label': 'M1 PAY',
			'width': 8,
			'align': 'right'
		    }, {
		        'label': 'M0 DEP',
			'width': 9,
			'align': 'right'
		    }, {
		        'label': 'M0 BAL',
			'width': 10,
			'align': 'right'
		    }, {
		        'label': 'M1 DEP',
			'width': 9,
			'align': 'right'
		    }, {
		        'label': 'M1 BAL',
			'width': 10,
			'align': 'right'
		    } ]
		});
		printf('\n');
	}

	i0 = m0.totalInterest();
	i1 = m1.totalInterest();
	v0 = a0[a0.length - 1].balanceAfter;
	v1 = a1[a1.length - 1].balanceAfter;
	idelta = i0 - i1;
	vdelta = v1 - v0;

	[
	    [ 'loan 1 total interest paid', i0 ],
	    [ 'loan 1 investment balance',  v0 ],
	    [ 'loan 2 total interest paid', i1 ],
	    [ 'loan 2 investment balance',  v1 ],
	    [ ],
	    [ 'loan 1 interest cost, relative to loan 2',    idelta ],
	    [ 'loan 1 opportunity cost, relative to loan 2', vdelta ],
	    [ 'LOAN 1 NET COST, RELATIVE TO LOAN 2',         idelta + vdelta ]
	].forEach(function (row) {
		if (row.length === 0) {
			printf('\n');
			return;
		}

		printf('%-44s  $ %10s\n', row[0] + ':', row[1].toFixed(2));
	});
}

function accumDelta(history, delta, investrate)
{
	var deposit, mrate, last, balanceBefore, gain, balanceAfter;

	deposit = Math.max(0, delta);

	if (history.length === 0) {
		history.push({
		    'balanceBefore': 0,
		    'gain': 0,
		    'deposit': deposit,
		    'balanceAfter': deposit
		});
		return;
	}

	last = history[history.length - 1];
	mrate = investrate / 12;

	balanceBefore = last.balanceAfter;
	gain = balanceBefore * mrate;
	balanceAfter = balanceBefore + gain + deposit;
	history.push({
	    'balanceBefore': balanceBefore,
	    'gain': gain,
	    'deposit': deposit,
	    'balanceAfter': balanceAfter
	});
}

function parseTimeValue(period)
{
	var num, years;

	period = period.trim();
	if (period.charAt(period.length - 1) == 'y') {
		period = period.substr(0, period.length - 1);
		years = true;
	} else {
		years = false;
	}

	num = Math.floor(Number(period));
	if (isNaN(num) || num < 0)
		return (null);

	if (years)
		num *= 12;

	return (num);
}

main();
